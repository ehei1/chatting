# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import client_to_agent_pb2 as client__to__agent__pb2


class AgentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TryLogin = channel.unary_unary(
                '/Agent/TryLogin',
                request_serializer=client__to__agent__pb2.LoginRequest.SerializeToString,
                response_deserializer=client__to__agent__pb2.LoginReply.FromString,
                )


class AgentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TryLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TryLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.TryLogin,
                    request_deserializer=client__to__agent__pb2.LoginRequest.FromString,
                    response_serializer=client__to__agent__pb2.LoginReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Agent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Agent(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TryLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Agent/TryLogin',
            client__to__agent__pb2.LoginRequest.SerializeToString,
            client__to__agent__pb2.LoginReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LobbyStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TryChatSend = channel.unary_unary(
                '/Lobby/TryChatSend',
                request_serializer=client__to__agent__pb2.Chat.SerializeToString,
                response_deserializer=client__to__agent__pb2.Empty.FromString,
                )
        self.TryChatReceive = channel.unary_stream(
                '/Lobby/TryChatReceive',
                request_serializer=client__to__agent__pb2.Chat.SerializeToString,
                response_deserializer=client__to__agent__pb2.Chat.FromString,
                )
        self.TryUserRemove = channel.unary_unary(
                '/Lobby/TryUserRemove',
                request_serializer=client__to__agent__pb2.UserRequest.SerializeToString,
                response_deserializer=client__to__agent__pb2.Empty.FromString,
                )
        self.TryCommand = channel.unary_unary(
                '/Lobby/TryCommand',
                request_serializer=client__to__agent__pb2.CommandRequest.SerializeToString,
                response_deserializer=client__to__agent__pb2.CommandReply.FromString,
                )
        self.TryUserExit = channel.unary_unary(
                '/Lobby/TryUserExit',
                request_serializer=client__to__agent__pb2.UserRequest.SerializeToString,
                response_deserializer=client__to__agent__pb2.StatusReply.FromString,
                )
        self.TryStatusRequest = channel.unary_stream(
                '/Lobby/TryStatusRequest',
                request_serializer=client__to__agent__pb2.UserRequest.SerializeToString,
                response_deserializer=client__to__agent__pb2.StatusReply.FromString,
                )


class LobbyServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TryChatSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryChatReceive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryUserRemove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryUserExit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryStatusRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LobbyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TryChatSend': grpc.unary_unary_rpc_method_handler(
                    servicer.TryChatSend,
                    request_deserializer=client__to__agent__pb2.Chat.FromString,
                    response_serializer=client__to__agent__pb2.Empty.SerializeToString,
            ),
            'TryChatReceive': grpc.unary_stream_rpc_method_handler(
                    servicer.TryChatReceive,
                    request_deserializer=client__to__agent__pb2.Chat.FromString,
                    response_serializer=client__to__agent__pb2.Chat.SerializeToString,
            ),
            'TryUserRemove': grpc.unary_unary_rpc_method_handler(
                    servicer.TryUserRemove,
                    request_deserializer=client__to__agent__pb2.UserRequest.FromString,
                    response_serializer=client__to__agent__pb2.Empty.SerializeToString,
            ),
            'TryCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.TryCommand,
                    request_deserializer=client__to__agent__pb2.CommandRequest.FromString,
                    response_serializer=client__to__agent__pb2.CommandReply.SerializeToString,
            ),
            'TryUserExit': grpc.unary_unary_rpc_method_handler(
                    servicer.TryUserExit,
                    request_deserializer=client__to__agent__pb2.UserRequest.FromString,
                    response_serializer=client__to__agent__pb2.StatusReply.SerializeToString,
            ),
            'TryStatusRequest': grpc.unary_stream_rpc_method_handler(
                    servicer.TryStatusRequest,
                    request_deserializer=client__to__agent__pb2.UserRequest.FromString,
                    response_serializer=client__to__agent__pb2.StatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Lobby', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Lobby(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TryChatSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Lobby/TryChatSend',
            client__to__agent__pb2.Chat.SerializeToString,
            client__to__agent__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryChatReceive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Lobby/TryChatReceive',
            client__to__agent__pb2.Chat.SerializeToString,
            client__to__agent__pb2.Chat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryUserRemove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Lobby/TryUserRemove',
            client__to__agent__pb2.UserRequest.SerializeToString,
            client__to__agent__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Lobby/TryCommand',
            client__to__agent__pb2.CommandRequest.SerializeToString,
            client__to__agent__pb2.CommandReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryUserExit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Lobby/TryUserExit',
            client__to__agent__pb2.UserRequest.SerializeToString,
            client__to__agent__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryStatusRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Lobby/TryStatusRequest',
            client__to__agent__pb2.UserRequest.SerializeToString,
            client__to__agent__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ChannelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TryChatSend = channel.unary_unary(
                '/Channel/TryChatSend',
                request_serializer=client__to__agent__pb2.Chat.SerializeToString,
                response_deserializer=client__to__agent__pb2.Empty.FromString,
                )
        self.TryChatReceive = channel.unary_stream(
                '/Channel/TryChatReceive',
                request_serializer=client__to__agent__pb2.Chat.SerializeToString,
                response_deserializer=client__to__agent__pb2.Chat.FromString,
                )
        self.TryUserRemove = channel.unary_unary(
                '/Channel/TryUserRemove',
                request_serializer=client__to__agent__pb2.UserRequest.SerializeToString,
                response_deserializer=client__to__agent__pb2.Empty.FromString,
                )
        self.TryStatusRequest = channel.unary_stream(
                '/Channel/TryStatusRequest',
                request_serializer=client__to__agent__pb2.UserRequest.SerializeToString,
                response_deserializer=client__to__agent__pb2.StatusReply.FromString,
                )


class ChannelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TryChatSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryChatReceive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryUserRemove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryStatusRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChannelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TryChatSend': grpc.unary_unary_rpc_method_handler(
                    servicer.TryChatSend,
                    request_deserializer=client__to__agent__pb2.Chat.FromString,
                    response_serializer=client__to__agent__pb2.Empty.SerializeToString,
            ),
            'TryChatReceive': grpc.unary_stream_rpc_method_handler(
                    servicer.TryChatReceive,
                    request_deserializer=client__to__agent__pb2.Chat.FromString,
                    response_serializer=client__to__agent__pb2.Chat.SerializeToString,
            ),
            'TryUserRemove': grpc.unary_unary_rpc_method_handler(
                    servicer.TryUserRemove,
                    request_deserializer=client__to__agent__pb2.UserRequest.FromString,
                    response_serializer=client__to__agent__pb2.Empty.SerializeToString,
            ),
            'TryStatusRequest': grpc.unary_stream_rpc_method_handler(
                    servicer.TryStatusRequest,
                    request_deserializer=client__to__agent__pb2.UserRequest.FromString,
                    response_serializer=client__to__agent__pb2.StatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Channel', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Channel(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TryChatSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Channel/TryChatSend',
            client__to__agent__pb2.Chat.SerializeToString,
            client__to__agent__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryChatReceive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Channel/TryChatReceive',
            client__to__agent__pb2.Chat.SerializeToString,
            client__to__agent__pb2.Chat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryUserRemove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Channel/TryUserRemove',
            client__to__agent__pb2.UserRequest.SerializeToString,
            client__to__agent__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryStatusRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Channel/TryStatusRequest',
            client__to__agent__pb2.UserRequest.SerializeToString,
            client__to__agent__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HeartbeatStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TryHeartbeat = channel.unary_stream(
                '/Heartbeat/TryHeartbeat',
                request_serializer=client__to__agent__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=client__to__agent__pb2.HeartbeatReply.FromString,
                )
        self.TryUserLives = channel.unary_unary(
                '/Heartbeat/TryUserLives',
                request_serializer=client__to__agent__pb2.UserRequest.SerializeToString,
                response_deserializer=client__to__agent__pb2.UserLivesReply.FromString,
                )


class HeartbeatServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TryHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryUserLives(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HeartbeatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TryHeartbeat': grpc.unary_stream_rpc_method_handler(
                    servicer.TryHeartbeat,
                    request_deserializer=client__to__agent__pb2.HeartbeatRequest.FromString,
                    response_serializer=client__to__agent__pb2.HeartbeatReply.SerializeToString,
            ),
            'TryUserLives': grpc.unary_unary_rpc_method_handler(
                    servicer.TryUserLives,
                    request_deserializer=client__to__agent__pb2.UserRequest.FromString,
                    response_serializer=client__to__agent__pb2.UserLivesReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Heartbeat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Heartbeat(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TryHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Heartbeat/TryHeartbeat',
            client__to__agent__pb2.HeartbeatRequest.SerializeToString,
            client__to__agent__pb2.HeartbeatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryUserLives(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Heartbeat/TryUserLives',
            client__to__agent__pb2.UserRequest.SerializeToString,
            client__to__agent__pb2.UserLivesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
